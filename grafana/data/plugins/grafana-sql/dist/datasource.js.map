{"version":3,"sources":["../src/datasource.js"],"names":["_","QueryModel","QueryBuilder","SQLDatasource","instanceSettings","$q","uiSegmentSrv","backendSrv","templateSrv","type","url","name","q","options","self","query","buildQueryParameters","targets","filter","t","hide","length","when","data","allQueries","map","model","target","scopedVars","render","reduce","acc","current","queryBuilder","undefined","querySql","request","then","console","log","response","status","message","title","param","method","datasourceRequest","headers","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","queryColumnValue"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport QueryModel from './query_model';\nimport QueryBuilder from './query_builder';\n\nexport class SQLDatasource {\n\n  constructor(instanceSettings, $q, uiSegmentSrv,backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv=backendSrv;\n    this.templateSrv=templateSrv;\n    this.uiSegmentSrv=uiSegmentSrv;\n  }\n\n  query(options) {\n  \tvar self=this;\n  \t\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\t\t\n\n    var allQueries = _.map(query.targets, target => {\r\n    \tvar model = new QueryModel(target,self.templateSrv,self.uiSegmentSrv, options.scopedVars);\n    \treturn model.render(true);\r\n    }).reduce((acc, current) => {\r\n      if (current !== \"\") {\r\n        acc += \";\" + current;\r\n      }\r\n      return acc;\r\n    });\r\n    \n\t\tthis.queryBuilder=new QueryBuilder(undefined,this);\n    return this.queryBuilder.querySql(allQueries);\n  }\n\t\n\t\n  testDatasource() {\n  \treturn this.request(this.url+'/db/health',undefined,'GET').then(response=>{\n\t\t\t  \t\t\tconsole.log(response);\n\t\t\t\t  \t\tif (response.status === 200) {\n\t\t\t\t        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n\t\t\t\t      }\n  \t\t\t\t\t});\n  }\n\trequest(url,param,method){\n\t\treturn this.backendSrv.datasourceRequest({\n\t\t\t\t      \turl:url,\n\t\t\t\t      \tdata:param,\n\t\t\t\t      \tmethod:method||'POST',\n\t\t\t\t      \theaders:{'Content-Type':'application/json'}\n\t\t\t    });\n\t}\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    var target = typeof (options) === \"string\" ? options : options.target;\n    var interpolated = {\n        target: this.templateSrv.replace(target, null, 'regex')\n    };\n\t\treturn this.queryBuilder.queryColumnValue(target);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n}\n"]}